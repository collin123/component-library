[
  { "name": "PrimaryButton", "category": "UI", "description": "Reusable primary button with click handler prop.", "code": "import React from 'react';\nexport default function PrimaryButton({onClick, children}:{onClick?:()=>void, children:any}){return <button onClick={onClick} className='px-4 py-2 bg-blue-600 text-white rounded'>{children}</button>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "IconButton", "category": "UI", "description": "Button with an inline SVG icon and accessible label.", "code": "const IconButton = ({label, icon}) => <button aria-label={label} className='p-2 rounded'>{icon}</button>; export default IconButton;", "language": "jsx", "file-extension": ".jsx" },
  { "name": "TextInput", "category": "Form", "description": "Controlled text input component for forms.", "code": "export default function TextInput({value,onChange,placeholder}){return <input value={value} onChange={e=>onChange(e.target.value)} placeholder={placeholder} className='border p-2 rounded w-full'/>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "SearchBar", "category": "Form", "description": "Search input with debounce helper for remote queries.", "code": "<form className='flex items-center gap-2'><input className='border p-2 rounded flex-1' placeholder='Search...' /></form>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "SelectDropdown", "category": "Form", "description": "Accessible select/dropdown component with options.", "code": "export default function Select({options, value, onChange}){return <select value={value} onChange={e=>onChange(e.target.value)}>{options.map(o=><option key={o.value} value={o.value}>{o.label}</option>)}</select>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "ToggleSwitch", "category": "UI", "description": "A11y-friendly toggle switch component.", "code": "function Toggle({on, onToggle}){return <button role=\"switch\" aria-checked={on} onClick={()=>onToggle(!on)} className={on? 'bg-green-500':'bg-gray-300'}> </button>} export default Toggle;", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Modal", "category": "UI", "description": "Centered modal overlay with close callback.", "code": "export default function Modal({open,onClose,children}){ if(!open) return null; return <div className='fixed inset-0 flex items-center justify-center bg-black bg-opacity-50'><div className='bg-white p-4 rounded'>{children}<button onClick={onClose}>Close</button></div></div>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Tooltip", "category": "UI", "description": "Simple tooltip using title attribute for accessibility.", "code": "export default function Tooltip({text,children}){return <span title={text} className='tooltip'>{children}</span>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Badge", "category": "UI", "description": "Small status badge component.", "code": "<span class='inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full'>New</span>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "Card", "category": "Layout", "description": "Simple content card with title and body.", "code": "export default function Card({title,children}){return <div className='p-4 rounded shadow bg-white'><h3>{title}</h3><div>{children}</div></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "ProfileCard", "category": "UI", "description": "User profile card with avatar and metadata.", "code": "<div class='p-4 bg-white rounded shadow'><img class='rounded-full w-12 h-12'/><div class='ml-3'>Name<br/><small>Role</small></div></div>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "Avatar", "category": "UI", "description": "Avatar image component with fallback initials.", "code": "export const Avatar = ({src,alt}) => <img src={src} alt={alt} className='w-10 h-10 rounded-full'/>;", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Navbar", "category": "Navigation", "description": "Responsive top navigation bar with brand and links.", "code": "export default function Navbar(){return <nav className='flex items-center justify-between p-4 bg-white shadow'><div className='font-bold'>Brand</div><div className='hidden md:flex gap-4'><a>Home</a><a>Docs</a></div></nav>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Footer", "category": "Layout", "description": "Site footer with copyright notice.", "code": "<footer class='text-sm text-gray-600 p-4 text-center'>&copy; Company</footer>", "language": "html", "file-extension": ".html" },
  { "name": "HeroSection", "category": "Layout", "description": "Prominent hero / banner section with headline.", "code": "<section class='py-12'><h1 class='text-3xl font-bold'>Welcome</h1><p class='mt-2 text-gray-600'>Lead text</p></section>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "GridLayout", "category": "Layout", "description": "CSS Grid wrapper for 3-column layouts.", "code": ".grid-3{display:grid;grid-template-columns:repeat(3,1fr);gap:1rem}", "language": "css", "file-extension": ".css" },
  { "name": "MasonryGrid", "category": "Layout", "description": "Simple masonry using CSS columns.", "code": ".masonry{column-count:3;column-gap:1rem}.masonry-item{display:inline-block;width:100%}", "language": "css", "file-extension": ".css" },
  { "name": "Accordion", "category": "UI", "description": "Expandable/collapsible accordion panel component.", "code": "export function AccordionItem({title,children}){const [open,setOpen]=React.useState(false);return <div><button onClick={()=>setOpen(!open)}>{title}</button>{open&&<div>{children}</div>}</div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Tabs", "category": "UI", "description": "Tabbed content component (client-side tabs).", "code": "export function Tabs({tabs}){const [i,setI]=React.useState(0);return <div><nav>{tabs.map((t,idx)=><button key={idx} onClick={()=>setI(idx)}>{t.title}</button>)}</nav><div>{tabs[i].content}</div></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Pagination", "category": "Navigation", "description": "Simple numeric pagination controls.", "code": "export function Pagination({page, total, onChange}){return <div className='flex gap-2'>{Array.from({length:total}).map((_,i)=><button key={i} onClick={()=>onChange(i+1)} className={i+1===page?'font-bold':''}>{i+1}</button>)}</div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Breadcrumbs", "category": "Navigation", "description": "Breadcrumb trail component for page hierarchy.", "code": "export default function Breadcrumbs({items}){return <nav aria-label=\"Breadcrumb\"><ol className='flex gap-2'>{items.map((i,k)=><li key={k}>{i}</li>)}</ol></nav>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Tag", "category": "UI", "description": "Small label/tag used for categorization.", "code": "export const Tag = ({text}) => <span className='text-xs bg-gray-100 px-2 py-1 rounded'>{text}</span>;", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Chip", "category": "UI", "description": "Compact removable chip used for filters.", "code": "export function Chip({label,onRemove}){return <span className='px-2 py-1 bg-gray-200 rounded'>{label}<button onClick={onRemove}>Ã—</button></span>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Toast", "category": "Feedback", "description": "Transient notification/toast component.", "code": "export default function Toast({message}){return <div className='fixed bottom-4 right-4 bg-gray-800 text-white p-3 rounded'>{message}</div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Spinner", "category": "Feedback", "description": "Small loading spinner component.", "code": "<div class='animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900'></div>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "Loader", "category": "Feedback", "description": "Full-page loader with centered spinner.", "code": "export default function Loader(){return <div className='min-h-screen flex items-center justify-center'><div className='loader'/></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "ProgressBar", "category": "UI", "description": "Horizontal determinate progress bar.", "code": "export function Progress({value}){return <div className='w-full bg-gray-200 h-2 rounded'><div style={{width:`${value}%`}} className='bg-blue-600 h-2 rounded' /></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "ContactForm", "category": "Form", "description": "Basic contact form with name/email/message fields.", "code": "export default function ContactForm(){return <form className='space-y-3'><input placeholder='Name' /><input placeholder='Email' /><textarea placeholder='Message'/><button>Send</button></form>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "LoginForm", "category": "Auth", "description": "Login form with email and password fields.", "code": "export default function Login(){return <form><input placeholder='Email' /><input type='password' placeholder='Password' /><button>Sign in</button></form>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "SignupForm", "category": "Auth", "description": "Signup form collecting name, email and password.", "code": "export default function SignUp(){return <form><input placeholder='Name' /><input placeholder='Email' /><input type='password' placeholder='Password'/><button>Create</button></form>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "Carousel", "category": "UI", "description": "Simple image carousel/slider with controls.", "code": "export default function Carousel({slides}){const [i,setI]=React.useState(0);return <div><img src={slides[i]} alt=\"\"/><button onClick={()=>setI((i-1+slides.length)%slides.length)}>Prev</button><button onClick={()=>setI((i+1)%slides.length)}>Next</button></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Dropdown", "category": "UI", "description": "Custom dropdown menu with keyboard support.", "code": "export function Dropdown({label,items}){const [open,setOpen]=React.useState(false);return <div><button onClick={()=>setOpen(!open)}>{label}</button>{open&&<ul>{items.map(i=><li key={i}>{i}</li>)}</ul>}</div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Sidebar", "category": "Navigation", "description": "Collapsible sidebar navigation for dashboards.", "code": "<aside class='w-64 bg-white border-r p-4'>Sidebar content</aside>", "language": "html", "file-extension": ".html" },
  { "name": "SubMenu", "category": "Navigation", "description": "Nested submenu used inside sidebars.", "code": "export function SubMenu({items}){return <ul>{items.map(i=><li key={i}>{i}</li>)}</ul>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "CodeBlock", "category": "Code", "description": "Preformatted code block container for syntax highlighting.", "code": "export default function CodeBlock({children}){return <pre className='rounded p-3 bg-gray-900 text-white overflow-auto'>{children}</pre>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "SyntaxHighlighter", "category": "Code", "description": "Wrapper around a syntax highlighting library (prism/rehype).", "code": "import Highlight from 'prism-react-renderer';\nexport default function Syntax({code,lang}){return <Highlight code={code} language={lang}>{(props)=> <pre {...props}/>}</Highlight>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "CodeEditor", "category": "Dev", "description": "Lightweight code editor area (contenteditable or library wrapper).", "code": "<div contenteditable class='bg-gray-800 text-white p-2 rounded' spellcheck='false'></div>", "language": "html", "file-extension": ".html" },
  { "name": "FileUploader", "category": "Input", "description": "Client-side file upload input with drag-and-drop hint.", "code": "export default function FileUploader(){return <input type='file' className='hidden'/>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "ImageGallery", "category": "Media", "description": "Responsive image gallery grid with lazy loading.", "code": "export default function Gallery({images}){return <div className='grid grid-cols-3 gap-2'>{images.map((src,i)=><img key={i} src={src} loading='lazy'/>)}</div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "Lightbox", "category": "Media", "description": "Modal lightbox to preview an image full-screen.", "code": "export function Lightbox({src,onClose}){return <div className='fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center'><img src={src} /><button onClick={onClose}>Close</button></div>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "VideoPlayer", "category": "Media", "description": "HTML5 video player wrapper with custom controls.", "code": "<video controls class='w-full'><source src='video.mp4' type='video/mp4' /></video>", "language": "html", "file-extension": ".html" },
  { "name": "AudioPlayer", "category": "Media", "description": "Simple audio player component using <audio> element.", "code": "<audio controls><source src='audio.mp3' type='audio/mpeg' /></audio>", "language": "html", "file-extension": ".html" },
  { "name": "SearchResults", "category": "Data", "description": "List view showing search results with highlights.", "code": "export default function Results({items}){return <ul>{items.map((it,i)=> <li key={i}>{it}</li>)}</ul>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "DataTable", "category": "Data", "description": "Accessible table component with sortable columns.", "code": "export default function Table({columns,rows}){return <table className='min-w-full'><thead><tr>{columns.map(c=> <th key={c}>{c}</th>)}</tr></thead><tbody>{rows.map((r,i)=><tr key={i}>{columns.map(c=> <td key={c}>{r[c]}</td>)}</tr>)}</tbody></table>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "ChartCard", "category": "Charts", "description": "Card containing a small chart (Chart.js or similar).", "code": "<canvas id='chart'></canvas>", "language": "html", "file-extension": ".html" },
  { "name": "MapMarker", "category": "Maps", "description": "Simple map marker component for map pins.", "code": "export const Marker = ({lat,lng}) => null; // map library integration placeholder", "language": "jsx", "file-extension": ".jsx" },
  { "name": "SearchAutocomplete", "category": "Form", "description": "Input with dropdown suggestions and keyboard navigation.", "code": "export default function Auto({suggestions}){return <input placeholder='Start typing...'/>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "RichTextEditor", "category": "Editor", "description": "Wrapper for a rich-text editor library (Quill/Tiptap).", "code": "<div class='prose'><p>Rich text area</p></div>", "language": "html", "file-extension": ".html" },
  { "name": "MentionInput", "category": "Form", "description": "Input that supports @mentions and suggestions.", "code": "export function MentionInput(){return <input/>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "FileList", "category": "Media", "description": "List of uploaded files with size and remove action.", "code": "export default function FileList({files}){return <ul>{files.map(f=><li key={f.name}>{f.name}</li>)}</ul>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "EditorToolbar", "category": "Editor", "description": "Toolbar for rich-text editor with formatting buttons.", "code": "export function Toolbar(){return <div className='flex gap-2'><button>B</button><button>I</button></div>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "ColorPicker", "category": "Input", "description": "Color selector control with preview.", "code": "<input type='color'/>", "language": "html", "file-extension": ".html" },
  { "name": "DatePicker", "category": "Input", "description": "Date input wrapper that normalizes format.", "code": "export default function DatePicker(){return <input type='date'/>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "TimePicker", "category": "Input", "description": "Time input wrapper for HH:MM selection.", "code": "<input type='time'/>", "language": "html", "file-extension": ".html" },
  { "name": "Stepper", "category": "UI", "description": "Multi-step progress stepper component.", "code": "export function Stepper({steps,current}){return <ol>{steps.map((s,i)=><li key={i} className={i===current?'font-bold':''}>{s}</li>)}</ol>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "WizardForm", "category": "Form", "description": "Multi-step form wrapper handling step transitions.", "code": "export default function Wizard(){return <form>Step form</form>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "NotificationBell", "category": "UI", "description": "Bell icon with unread notification count.", "code": "export default function Bell({count}){return <button aria-label=\"Notifications\">ðŸ””{count>0&&<span>{count}</span>}</button>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "LiveRegion", "category": "A11y", "description": "ARIA live region for announcing updates to assistive tech.", "code": "export function Live({message}){return <div aria-live=\"polite\">{message}</div>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "KeyboardShortcuts", "category": "UX", "description": "Handler for registering global keyboard shortcuts.", "code": "export function useHotkey(key, handler){React.useEffect(()=>{const h=e=>{if(e.key===key)handler()};window.addEventListener('keydown',h);return ()=>window.removeEventListener('keydown',h)},[key,handler])}", "language": "tsx", "file-extension": ".ts" },
  { "name": "LocalStorageHook", "category": "State", "description": "Hook to persist state to localStorage.", "code": "export function useLocalStorage(key, initial){const [s,setS]=React.useState(()=>JSON.parse(localStorage.getItem(key)||'null')||initial);React.useEffect(()=>localStorage.setItem(key,JSON.stringify(s)),[key,s]);return [s,setS]}", "language": "tsx", "file-extension": ".ts" },
  { "name": "ClipboardCopy", "category": "Utility", "description": "Button to copy text to the clipboard and show confirmation.", "code": "export function CopyBtn({text}){return <button onClick={()=>navigator.clipboard.writeText(text)}>Copy</button>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "DebounceUtil", "category": "Utility", "description": "Generic debounce function to limit call frequency.", "code": "export function debounce(fn,ms){let t;return(...a)=>{clearTimeout(t);t=setTimeout(()=>fn(...a),ms)}}", "language": "javascript", "file-extension": ".js" },
  { "name": "ThrottleUtil", "category": "Utility", "description": "Simple throttle implementation for scroll/resize handlers.", "code": "export function throttle(fn,ms){let last=0;return(...a)=>{const now=Date.now();if(now-last>ms){last=now;fn(...a)}}}", "language": "javascript", "file-extension": ".js" },
  { "name": "FetchJson", "category": "Network", "description": "Small fetch helper that returns parsed JSON.", "code": "export async function fetchJson(url){const r=await fetch(url);return await r.json()}", "language": "typescript", "file-extension": ".ts" },
  { "name": "ApiClient", "category": "Network", "description": "Tiny wrapper around fetch for authenticated requests.", "code": "export async function apiGet(url,token){return fetch(url,{headers:{Authorization:`Bearer ${token}`}}).then(r=>r.json())}", "language": "typescript", "file-extension": ".ts" },
  { "name": "CsvParser", "category": "Data", "description": "Small CSV parser that splits lines and commas.", "code": "export function parseCSV(text){return text.split('\n').map(l=>l.split(','))}", "language": "javascript", "file-extension": ".js" },
  { "name": "JsonToCsv", "category": "Data", "description": "Utility to convert array of objects to CSV string.", "code": "export function jsonToCsv(arr){const keys=Object.keys(arr[0]||{});return [keys.join(','),...arr.map(r=>keys.map(k=>r[k]).join(','))].join('\n')}", "language": "javascript", "file-extension": ".js" },
  { "name": "CsvDownload", "category": "Data", "description": "Trigger download of CSV generated from data.", "code": "export function downloadCsv(filename, csv){const a=document.createElement('a');a.href='data:text/csv;charset=utf-8,'+encodeURIComponent(csv);a.download=filename;a.click();}", "language": "javascript", "file-extension": ".js" },
  { "name": "AuthForm", "category": "Auth", "description": "Form wrapper that submits credentials to an auth endpoint.", "code": "export default function AuthForm(){return <form><input placeholder='Email' /><input type='password' placeholder='Password' /><button>Sign in</button></form>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "OAuthButton", "category": "Auth", "description": "Button that starts an OAuth sign-in flow.", "code": "export function OAuthBtn({provider}){return <button>Continue with {provider}</button>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "StripeCheckout", "category": "Payments", "description": "Placeholder for Stripe checkout integration component.", "code": "export function Checkout(){return <button>Checkout</button>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "PaypalButton", "category": "Payments", "description": "PayPal payment button integration placeholder.", "code": "export function Paypal(){return <button>PayPal</button>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "SitemapLink", "category": "SEO", "description": "Link used in sitemap/footer for SEO-friendly navigation.", "code": "export default function Sitemap(){return <a href='/sitemap.xml'>Sitemap</a>}", "language": "jsx", "file-extension": ".jsx" },
  { "name": "MetaTags", "category": "SEO", "description": "Component to inject standard meta tags into head.", "code": "export function Meta({title,desc}){return null /* use helmet or next/head in real apps */}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "OpenGraphCard", "category": "SEO", "description": "Server-side snippet to generate Open Graph metadata.", "code": "<meta property='og:title' content='Title'/>", "language": "html", "file-extension": ".html" },
  { "name": "SsrPlaceholder", "category": "Performance", "description": "Placeholder component used during server-side rendering hydration.", "code": "export default function Placeholder(){return <div className='skeleton'/>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "LazyImage", "category": "Performance", "description": "Image component that lazy-loads with native loading='lazy'.", "code": "export default function LazyImage({src,alt}){return <img loading='lazy' src={src} alt={alt}/>}", "language": "tsx", "file-extension": ".tsx" },
  { "name": "IntersectionHook", "category": "Performance", "description": "Hook built on IntersectionObserver to detect on-screen elements.", "code": "export function useOnScreen(ref){const [v,setV]=React.useState(false);React.useEffect(()=>{const obs=new IntersectionObserver(([e])=>setV(e.isIntersecting));if(ref.current)obs.observe(ref.current);return ()=>obs.disconnect()},[ref]);return v}", "language": "tsx", "file-extension": ".ts" },
  { "name": "AnalyticsEvent", "category": "Analytics", "description": "Small wrapper to send analytics events to a tracking endpoint.", "code": "export function track(event,data){fetch('/api/track',{method:'POST',body:JSON.stringify({event,data})})}", "language": "javascript", "file-extension": ".js" },
  { "name": "FeatureFlag", "category": "Feature", "description": "Utility to read feature flags from a config object.", "code": "export function isEnabled(flags,name){return !!flags[name]}", "language": "javascript", "file-extension": ".js" },
  { "name": "A11ySkipLink", "category": "A11y", "description": "Skip-to-content link for keyboard users.", "code": "<a href='#main' class='skip-link'>Skip to content</a>", "language": "html", "file-extension": ".html" },
  { "name": "ResponsiveImageSrcset", "category": "Media", "description": "Example <img> showing srcset usage for responsive images.", "code": "<img src='img.jpg' srcset='img-400.jpg 400w, img-800.jpg 800w' sizes='(max-width:600px) 100vw, 50vw'/>", "language": "html", "file-extension": ".html" },
  { "name": "SassVariables", "category": "Styles", "description": "SCSS variables and small mixin example.", "code": "$brand: #0d6efd;\n@mixin rounded($r:4px){border-radius:$r}\n.btn{@include rounded()}", "language": "scss", "file-extension": ".scss" },
  { "name": "TailwindCard", "category": "UI", "description": "Card component built with Tailwind utility classes.", "code": "<div class='bg-white shadow rounded p-4'><h3 class='font-semibold'>Title</h3><p class='mt-2 text-gray-600'>Body</p></div>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "TailwindGrid", "category": "Layout", "description": "Responsive grid using Tailwind breakpoints.", "code": "<div class='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4'>...</div>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "TailwindForm", "category": "Form", "description": "A simple form styled with Tailwind utilities.", "code": "<form class='space-y-4'><input class='w-full border p-2 rounded'/><button class='bg-blue-600 text-white px-4 py-2 rounded'>Submit</button></form>", "language": "tailwind css", "file-extension": ".html" },
  { "name": "UtilityClasses", "category": "Styles", "description": "Plain CSS utility class examples (non-Tailwind).", "code": ".text-center{text-align:center}.mt-4{margin-top:1rem}", "language": "css", "file-extension": ".css" },
  { "name": "FormValidatorsPy", "category": "Python", "description": "Small Python validators for email and URL.", "code": "import re\ndef is_email(s):\n  return bool(re.match(r'^[^@]+@[^@]+\\.[^@]+$', s))\n\ndef is_url(s):\n  return s.startswith('http')", "language": "python", "file-extension": ".py" },
  { "name": "CsvReaderPy", "category": "Python", "description": "Parse CSV rows into lists using Python's csv module.", "code": "import csv\nwith open('data.csv') as f:\n  reader=csv.reader(f)\n  rows=list(reader)", "language": "python", "file-extension": ".py" }
]
